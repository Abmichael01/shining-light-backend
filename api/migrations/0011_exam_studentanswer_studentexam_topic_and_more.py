# Generated by Django 5.2.7 on 2025-10-21 17:45

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("api", "0009_question"),
    ]

    operations = [
        migrations.CreateModel(
            name="Exam",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="e.g., Mathematics Mid-Term Test, Physics Final Exam",
                        max_length=200,
                        verbose_name="exam title",
                    ),
                ),
                (
                    "exam_type",
                    models.CharField(
                        choices=[
                            ("test", "Test"),
                            ("exam", "Examination"),
                            ("quiz", "Quiz"),
                            ("practice", "Practice"),
                        ],
                        default="test",
                        max_length=20,
                        verbose_name="exam type",
                    ),
                ),
                ("start_date", models.DateField(verbose_name="start date")),
                ("start_time", models.TimeField(verbose_name="start time")),
                ("end_date", models.DateField(verbose_name="end date")),
                ("end_time", models.TimeField(verbose_name="end time")),
                (
                    "duration_minutes",
                    models.PositiveIntegerField(
                        help_text="Total time allowed for the exam in minutes",
                        verbose_name="duration (minutes)",
                    ),
                ),
                (
                    "total_marks",
                    models.PositiveIntegerField(
                        help_text="Total marks for the exam", verbose_name="total marks"
                    ),
                ),
                (
                    "pass_mark",
                    models.PositiveIntegerField(
                        help_text="Minimum marks required to pass",
                        verbose_name="pass mark",
                    ),
                ),
                (
                    "total_questions",
                    models.PositiveIntegerField(
                        help_text="Number of questions in the exam (auto-calculated from selected questions/topics)",
                        verbose_name="total questions",
                    ),
                ),
                (
                    "shuffle_questions",
                    models.BooleanField(
                        default=True,
                        help_text="Randomize question order for each student",
                        verbose_name="shuffle questions",
                    ),
                ),
                (
                    "shuffle_options",
                    models.BooleanField(
                        default=True,
                        help_text="Randomize option order for multiple choice questions",
                        verbose_name="shuffle options",
                    ),
                ),
                (
                    "show_results_immediately",
                    models.BooleanField(
                        default=False,
                        help_text="Show score to students after submission",
                        verbose_name="show results immediately",
                    ),
                ),
                (
                    "allow_review",
                    models.BooleanField(
                        default=True,
                        help_text="Allow students to review answers before submission",
                        verbose_name="allow review",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("draft", "Draft"),
                            ("scheduled", "Scheduled"),
                            ("active", "Active"),
                            ("completed", "Completed"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="draft",
                        max_length=20,
                        verbose_name="status",
                    ),
                ),
                (
                    "instructions",
                    models.TextField(
                        blank=True,
                        help_text="Instructions to be shown to students before the exam",
                        null=True,
                        verbose_name="instructions",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="updated at"),
                ),
            ],
            options={
                "verbose_name": "Exam",
                "verbose_name_plural": "Exams",
                "ordering": ["-start_date", "-start_time"],
            },
        ),
        migrations.CreateModel(
            name="StudentAnswer",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "question_number",
                    models.PositiveSmallIntegerField(
                        help_text="Question number in the exam",
                        verbose_name="question number",
                    ),
                ),
                (
                    "answer_text",
                    models.TextField(
                        help_text="Student's answer (A, B, C, D, E for multiple choice, or text for other types)",
                        verbose_name="answer text",
                    ),
                ),
                (
                    "is_correct",
                    models.BooleanField(
                        blank=True, null=True, verbose_name="is correct"
                    ),
                ),
                (
                    "marks_obtained",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        max_digits=5,
                        verbose_name="marks obtained",
                    ),
                ),
                (
                    "answered_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="answered at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="updated at"),
                ),
            ],
            options={
                "verbose_name": "Student Answer",
                "verbose_name_plural": "Student Answers",
                "ordering": ["student_exam", "question_number"],
            },
        ),
        migrations.CreateModel(
            name="StudentExam",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "started_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="started at"
                    ),
                ),
                (
                    "submitted_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="submitted at"
                    ),
                ),
                (
                    "time_remaining_seconds",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Used for pause/resume functionality",
                        null=True,
                        verbose_name="time remaining (seconds)",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("not_started", "Not Started"),
                            ("in_progress", "In Progress"),
                            ("submitted", "Submitted"),
                            ("graded", "Graded"),
                        ],
                        default="not_started",
                        max_length=20,
                        verbose_name="status",
                    ),
                ),
                (
                    "score",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Total marks obtained",
                        max_digits=6,
                        null=True,
                        verbose_name="score",
                    ),
                ),
                (
                    "percentage",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=5,
                        null=True,
                        verbose_name="percentage",
                    ),
                ),
                (
                    "passed",
                    models.BooleanField(blank=True, null=True, verbose_name="passed"),
                ),
                (
                    "question_order",
                    models.JSONField(
                        blank=True,
                        help_text="Randomized question order for this student: [question_id1, question_id2, ...]",
                        null=True,
                        verbose_name="question order",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="updated at"),
                ),
            ],
            options={
                "verbose_name": "Student Exam",
                "verbose_name_plural": "Student Exams",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Topic",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="e.g., Algebra, Geometry, Kinematics, Organic Chemistry",
                        max_length=200,
                        verbose_name="topic name",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Brief description of what this topic covers",
                        null=True,
                        verbose_name="description",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Inactive topics won't be available for exam creation",
                        verbose_name="active",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="updated at"),
                ),
            ],
            options={
                "verbose_name": "Topic",
                "verbose_name_plural": "Topics",
                "ordering": ["subject", "name"],
            },
        ),
        migrations.RemoveIndex(
            model_name="question",
            name="api_questio_subject_65efa2_idx",
        ),
        migrations.RemoveField(
            model_name="question",
            name="topic",
        ),
        migrations.AddField(
            model_name="exam",
            name="created_by",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="created_exams",
                to=settings.AUTH_USER_MODEL,
                verbose_name="created by",
            ),
        ),
        migrations.AddField(
            model_name="exam",
            name="questions",
            field=models.ManyToManyField(
                blank=True,
                help_text="Select specific questions (use this OR topics, not both)",
                related_name="exams",
                to="api.question",
                verbose_name="questions",
            ),
        ),
        migrations.AddField(
            model_name="exam",
            name="session_term",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="exams",
                to="api.sessionterm",
                verbose_name="session term",
            ),
        ),
        migrations.AddField(
            model_name="exam",
            name="subject",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="exams",
                to="api.subject",
                verbose_name="subject",
            ),
        ),
        migrations.AddField(
            model_name="studentanswer",
            name="question",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="student_answers",
                to="api.question",
                verbose_name="question",
            ),
        ),
        migrations.AddField(
            model_name="studentexam",
            name="exam",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="student_attempts",
                to="api.exam",
                verbose_name="exam",
            ),
        ),
        migrations.AddField(
            model_name="studentexam",
            name="student",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="exam_attempts",
                to="api.student",
                verbose_name="student",
            ),
        ),
        migrations.AddField(
            model_name="studentanswer",
            name="student_exam",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="answers",
                to="api.studentexam",
                verbose_name="student exam",
            ),
        ),
        migrations.AddField(
            model_name="topic",
            name="subject",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="topics",
                to="api.subject",
                verbose_name="subject",
            ),
        ),
        migrations.AddField(
            model_name="exam",
            name="topics",
            field=models.ManyToManyField(
                blank=True,
                help_text="Select topics for random question selection",
                related_name="exams",
                to="api.topic",
                verbose_name="topics",
            ),
        ),
        migrations.AddField(
            model_name="question",
            name="topic_model",
            field=models.ForeignKey(
                blank=True,
                help_text="Specific topic or unit this question covers",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="questions",
                to="api.topic",
                verbose_name="topic",
            ),
        ),
        migrations.AddIndex(
            model_name="question",
            index=models.Index(
                fields=["subject", "topic_model"], name="api_questio_subject_237208_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="studentexam",
            index=models.Index(
                fields=["student", "exam"], name="api_student_student_02ea2e_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="studentexam",
            index=models.Index(fields=["status"], name="api_student_status_094da7_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="studentexam",
            unique_together={("student", "exam")},
        ),
        migrations.AlterUniqueTogether(
            name="studentanswer",
            unique_together={("student_exam", "question")},
        ),
        migrations.AlterUniqueTogether(
            name="topic",
            unique_together={("subject", "name")},
        ),
        migrations.AddIndex(
            model_name="exam",
            index=models.Index(
                fields=["subject", "session_term"], name="api_exam_subject_dc6702_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="exam",
            index=models.Index(
                fields=["status", "start_date"], name="api_exam_status_eff29f_idx"
            ),
        ),
    ]
