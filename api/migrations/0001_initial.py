# Generated by Django 5.2.7 on 2025-10-17 01:00

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='School',
            fields=[
                ('id', models.CharField(editable=False, max_length=10, primary_key=True, serialize=False, verbose_name='id')),
                ('name', models.CharField(max_length=100, verbose_name='school name')),
                ('school_type', models.CharField(choices=[('Nursery', 'Nursery School'), ('Primary', 'Primary School'), ('Junior Secondary', 'Junior Secondary School'), ('Senior Secondary', 'Senior Secondary School')], max_length=20, unique=True, verbose_name='school type')),
                ('code', models.CharField(editable=False, max_length=10, unique=True, verbose_name='school code')),
                ('is_active', models.BooleanField(default=True, verbose_name='active')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
            ],
            options={
                'verbose_name': 'School',
                'verbose_name_plural': 'Schools',
                'ordering': ['school_type', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Session',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, unique=True, verbose_name='session name')),
                ('start_date', models.DateField(verbose_name='start date')),
                ('end_date', models.DateField(verbose_name='end date')),
                ('is_current', models.BooleanField(default=False, verbose_name='current session')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
            ],
            options={
                'verbose_name': 'Session',
                'verbose_name_plural': 'Sessions',
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('user_type', models.CharField(choices=[('admin', 'Admin'), ('staff', 'Staff'), ('student', 'Student'), ('applicant', 'Applicant')], default='applicant', max_length=20, verbose_name='user type')),
                ('is_active', models.BooleanField(default=True, verbose_name='active')),
                ('is_staff', models.BooleanField(default=False, verbose_name='staff status')),
                ('date_joined', models.DateTimeField(auto_now_add=True, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
        ),
        migrations.CreateModel(
            name='Class',
            fields=[
                ('id', models.CharField(editable=False, max_length=10, primary_key=True, serialize=False, verbose_name='id')),
                ('name', models.CharField(help_text='e.g., Nursery 1, Primary 1, JSS 1, SSS 2', max_length=50, verbose_name='class name')),
                ('class_code', models.CharField(help_text='Short code for class, e.g., SS1, JSS2, PRI1, NUR1', max_length=10, unique=True, verbose_name='class code')),
                ('order', models.PositiveSmallIntegerField(default=0, verbose_name='display order')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('class_staff', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='classes_assigned', to=settings.AUTH_USER_MODEL, verbose_name='class staff')),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='classes', to='api.school', verbose_name='school')),
            ],
            options={
                'verbose_name': 'Class',
                'verbose_name_plural': 'Classes',
                'ordering': ['school', 'order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='FeeType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='e.g., Admission Fee, Tuition Fee, Sport Fee', max_length=200)),
                ('description', models.TextField(blank=True)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('max_installments', models.PositiveIntegerField(default=1, help_text='Maximum number of installments allowed (1 = pay in full only)')),
                ('is_mandatory', models.BooleanField(default=True, help_text='Is this fee required for all students?')),
                ('is_recurring_per_term', models.BooleanField(default=False, help_text='Does student pay this fee every term?')),
                ('is_active', models.BooleanField(default=True, help_text='Is this fee currently active?')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('applicable_classes', models.ManyToManyField(blank=True, help_text='Leave empty to apply to all classes in the school', related_name='fee_types', to='api.class')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='fee_types_created', to=settings.AUTH_USER_MODEL)),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='fee_types', to='api.school')),
            ],
            options={
                'db_table': 'fee_types',
                'ordering': ['school', 'name'],
            },
        ),
        migrations.CreateModel(
            name='SalaryGrade',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('grade_number', models.PositiveIntegerField(choices=[(1, 'Grade 1'), (2, 'Grade 2'), (3, 'Grade 3'), (4, 'Grade 4'), (5, 'Grade 5'), (6, 'Grade 6'), (7, 'Grade 7'), (8, 'Grade 8')])),
                ('monthly_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('description', models.TextField(blank=True, help_text='Optional description of the grade')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='salary_grades_created', to=settings.AUTH_USER_MODEL)),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='salary_grades', to='api.school')),
            ],
            options={
                'db_table': 'salary_grades',
                'ordering': ['grade_number'],
                'unique_together': {('school', 'grade_number')},
            },
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='department name')),
                ('code', models.CharField(max_length=10, verbose_name='department code')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='departments', to='api.school', verbose_name='school')),
            ],
            options={
                'verbose_name': 'Department',
                'verbose_name_plural': 'Departments',
                'ordering': ['school', 'name'],
            },
        ),
        migrations.CreateModel(
            name='SessionTerm',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('term_name', models.CharField(choices=[('1st Term', '1st Term'), ('2nd Term', '2nd Term'), ('3rd Term', '3rd Term')], max_length=20, verbose_name='term name')),
                ('start_date', models.DateField(verbose_name='start date')),
                ('end_date', models.DateField(verbose_name='end date')),
                ('is_current', models.BooleanField(default=False, verbose_name='current term')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='session_terms', to='api.session', verbose_name='session')),
            ],
            options={
                'verbose_name': 'Session Term',
                'verbose_name_plural': 'Session Terms',
                'ordering': ['session', 'term_name'],
            },
        ),
        migrations.CreateModel(
            name='Staff',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('staff_id', models.CharField(blank=True, max_length=20, unique=True)),
                ('title', models.CharField(choices=[('miss', 'Miss'), ('mrs', 'Mrs'), ('mr', 'Mr'), ('dr', 'Dr')], max_length=10)),
                ('surname', models.CharField(max_length=100)),
                ('first_name', models.CharField(max_length=100)),
                ('other_names', models.CharField(blank=True, max_length=100)),
                ('nationality', models.CharField(default='Nigerian', max_length=100)),
                ('state_of_origin', models.CharField(max_length=100)),
                ('date_of_birth', models.DateField()),
                ('permanent_address', models.TextField()),
                ('phone_number', models.CharField(max_length=20)),
                ('marital_status', models.CharField(choices=[('single', 'Single'), ('married', 'Married')], max_length=20)),
                ('religion', models.CharField(choices=[('muslim', 'Muslim'), ('christian', 'Christian')], max_length=20)),
                ('entry_date', models.DateField(default=django.utils.timezone.now)),
                ('staff_type', models.CharField(choices=[('teaching', 'Teaching Staff'), ('non_teaching', 'Non-Teaching Staff')], default='teaching', max_length=20)),
                ('zone', models.CharField(choices=[('ransowa', 'Ransowa'), ('omoowo', 'Omoowo')], max_length=20)),
                ('number_of_children_in_school', models.PositiveIntegerField(default=0)),
                ('account_name', models.CharField(blank=True, max_length=200)),
                ('account_number', models.CharField(blank=True, max_length=20)),
                ('bank_name', models.CharField(blank=True, max_length=100)),
                ('passport_photo', models.FileField(blank=True, null=True, upload_to='staff/passports/')),
                ('status', models.CharField(choices=[('active', 'Active'), ('on_leave', 'On Leave'), ('suspended', 'Suspended'), ('terminated', 'Terminated'), ('retired', 'Retired')], default='active', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assigned_class', models.ForeignKey(blank=True, help_text='Class the staff member is assigned to (for teaching staff)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_staff_members', to='api.class')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='staff_created', to=settings.AUTH_USER_MODEL)),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='staff_members', to='api.school')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='staff_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Staff',
                'db_table': 'staff',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SalaryPayment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('month', models.PositiveIntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12)])),
                ('year', models.PositiveIntegerField()),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('deductions', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('net_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('paid', 'Paid'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('payment_date', models.DateField(blank=True, null=True)),
                ('reference_number', models.CharField(blank=True, max_length=100)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('processed_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='salary_payments_processed', to=settings.AUTH_USER_MODEL)),
                ('salary_grade', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='payments', to='api.salarygrade')),
                ('staff', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='salary_payments', to='api.staff')),
            ],
            options={
                'db_table': 'salary_payments',
                'ordering': ['-year', '-month', 'staff'],
            },
        ),
        migrations.CreateModel(
            name='LoanApplication',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('application_number', models.CharField(blank=True, max_length=20, unique=True)),
                ('loan_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('interest_rate', models.DecimalField(decimal_places=2, default=0, help_text='Interest rate as percentage', max_digits=5)),
                ('total_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('repayment_period_months', models.PositiveIntegerField(help_text='Repayment period in months')),
                ('monthly_deduction', models.DecimalField(decimal_places=2, max_digits=10)),
                ('purpose', models.TextField(help_text='Reason for loan application')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('disbursed', 'Disbursed'), ('completed', 'Completed'), ('defaulted', 'Defaulted')], default='pending', max_length=20)),
                ('application_date', models.DateField(auto_now_add=True)),
                ('approval_date', models.DateField(blank=True, null=True)),
                ('disbursement_date', models.DateField(blank=True, null=True)),
                ('review_notes', models.TextField(blank=True)),
                ('rejection_reason', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='loans_reviewed', to=settings.AUTH_USER_MODEL)),
                ('staff', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='loan_applications', to='api.staff')),
            ],
            options={
                'db_table': 'loan_applications',
                'ordering': ['-application_date'],
            },
        ),
        migrations.CreateModel(
            name='StaffEducation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.CharField(choices=[('primary', 'Primary School'), ('secondary', 'Secondary School'), ('tertiary', 'Tertiary Institution')], max_length=20)),
                ('institution_name', models.CharField(max_length=200)),
                ('year_of_graduation', models.PositiveIntegerField()),
                ('degree', models.CharField(blank=True, choices=[('ond', 'OND'), ('hnd', 'HND'), ('nce', 'NCE'), ('bsc', 'B.Sc'), ('bed', 'B.Ed'), ('msc', 'M.Sc'), ('med', 'M.Ed'), ('phd', 'Ph.D'), ('other', 'Other')], help_text='Applicable for tertiary education only', max_length=20)),
                ('certificate', models.FileField(blank=True, null=True, upload_to='staff/certificates/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('staff', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='education_records', to='api.staff')),
            ],
            options={
                'db_table': 'staff_education',
                'ordering': ['staff', 'year_of_graduation'],
            },
        ),
        migrations.CreateModel(
            name='StaffSalary',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('effective_date', models.DateField(default=django.utils.timezone.now)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assigned_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='staff_salaries_assigned', to=settings.AUTH_USER_MODEL)),
                ('salary_grade', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='assigned_staff', to='api.salarygrade')),
                ('staff', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='current_salary', to='api.staff')),
            ],
            options={
                'verbose_name_plural': 'Staff salaries',
                'db_table': 'staff_salaries',
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('application_number', models.CharField(help_text='Auto-generated on application', max_length=20, unique=True, verbose_name='application number')),
                ('admission_number', models.CharField(blank=True, help_text='Auto-generated on acceptance', max_length=20, unique=True, verbose_name='admission number')),
                ('former_school_attended', models.CharField(blank=True, max_length=255, verbose_name='former school attended')),
                ('status', models.CharField(choices=[('applicant', 'Applicant'), ('under_review', 'Under Review'), ('accepted', 'Accepted'), ('enrolled', 'Enrolled'), ('suspended', 'Suspended'), ('graduated', 'Graduated'), ('withdrawn', 'Withdrawn'), ('rejected', 'Rejected')], default='applicant', max_length=20, verbose_name='status')),
                ('source', models.CharField(choices=[('online_application', 'Online Application'), ('admin_registration', 'Admin Registration')], help_text='How this student record was created', max_length=30, verbose_name='source')),
                ('application_date', models.DateField(auto_now_add=True, verbose_name='application date')),
                ('review_date', models.DateField(blank=True, null=True, verbose_name='review date')),
                ('acceptance_date', models.DateField(blank=True, null=True, verbose_name='acceptance date')),
                ('enrollment_date', models.DateField(blank=True, null=True, verbose_name='enrollment date')),
                ('graduation_date', models.DateField(blank=True, null=True, verbose_name='graduation date')),
                ('rejection_reason', models.TextField(blank=True, verbose_name='rejection reason')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('class_model', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='students', to='api.class', verbose_name='class')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='students_created', to=settings.AUTH_USER_MODEL, verbose_name='created by')),
                ('department', models.ForeignKey(blank=True, help_text='Only for Senior Secondary (SS1, SS2, SS3)', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='students', to='api.department', verbose_name='department')),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='students_reviewed', to=settings.AUTH_USER_MODEL, verbose_name='reviewed by')),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='students', to='api.school', verbose_name='school')),
                ('user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='student_profile', to=settings.AUTH_USER_MODEL, verbose_name='user account')),
            ],
            options={
                'verbose_name': 'Student',
                'verbose_name_plural': 'Students',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Guardian',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('guardian_type', models.CharField(choices=[('father', 'Father'), ('mother', 'Mother'), ('guardian', 'Guardian')], max_length=20, verbose_name='guardian type')),
                ('relationship_to_student', models.CharField(blank=True, help_text='For "Guardian" type, specify relationship', max_length=100, verbose_name='relationship to student')),
                ('surname', models.CharField(max_length=100, verbose_name='surname')),
                ('first_name', models.CharField(max_length=100, verbose_name='first name')),
                ('state_of_origin', models.CharField(max_length=100, verbose_name='state of origin')),
                ('phone_number', models.CharField(max_length=20, verbose_name='phone number')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email')),
                ('occupation', models.CharField(max_length=150, verbose_name='occupation')),
                ('place_of_employment', models.CharField(max_length=255, verbose_name='place of employment')),
                ('is_primary_contact', models.BooleanField(default=False, help_text='Is this the main contact person?', verbose_name='primary contact')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='guardians', to='api.student', verbose_name='student')),
            ],
            options={
                'verbose_name': 'Guardian',
                'verbose_name_plural': 'Guardians',
                'ordering': ['-is_primary_contact', 'guardian_type'],
            },
        ),
        migrations.CreateModel(
            name='FeePayment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('installment_number', models.PositiveIntegerField(default=1, help_text='Which installment is this (1, 2, 3, etc.)')),
                ('payment_date', models.DateField(default=django.utils.timezone.now)),
                ('payment_method', models.CharField(choices=[('cash', 'Cash'), ('bank_transfer', 'Bank Transfer'), ('card', 'Card/POS'), ('cheque', 'Cheque'), ('online', 'Online Payment')], default='cash', max_length=20)),
                ('reference_number', models.CharField(blank=True, max_length=100)),
                ('receipt_number', models.CharField(blank=True, max_length=50, unique=True)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('processed_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='fee_payments_processed', to=settings.AUTH_USER_MODEL)),
                ('fee_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='payments', to='api.feetype')),
                ('session', models.ForeignKey(blank=True, help_text='Applicable for recurring fees', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='fee_payments', to='api.session')),
                ('session_term', models.ForeignKey(blank=True, help_text='Applicable for per-term recurring fees', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='fee_payments', to='api.sessionterm')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fee_payments', to='api.student')),
            ],
            options={
                'db_table': 'fee_payments',
                'ordering': ['-payment_date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('document_type', models.CharField(choices=[('nin', 'National Identification Number (NIN)'), ('birth_certificate', 'Birth Certificate'), ('primary_certificate', 'Primary School Certificate'), ('bece_certificate', 'BECE Certificate'), ('passport', 'Passport Photograph'), ('other', 'Other')], max_length=30, verbose_name='document type')),
                ('document_file', models.FileField(upload_to='student_documents/%Y/%m/%d/', verbose_name='document file')),
                ('document_number', models.CharField(blank=True, help_text='e.g., NIN number, certificate number', max_length=100, verbose_name='document number')),
                ('verified', models.BooleanField(default=False, verbose_name='verified')),
                ('verified_at', models.DateTimeField(blank=True, null=True, verbose_name='verified at')),
                ('notes', models.TextField(blank=True, verbose_name='notes')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True, verbose_name='uploaded at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('verified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='documents_verified', to=settings.AUTH_USER_MODEL, verbose_name='verified by')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='api.student', verbose_name='student')),
            ],
            options={
                'verbose_name': 'Document',
                'verbose_name_plural': 'Documents',
                'ordering': ['-uploaded_at'],
            },
        ),
        migrations.CreateModel(
            name='Biometric',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('left_thumb', models.ImageField(blank=True, null=True, upload_to='biometrics/%Y/%m/%d/', verbose_name='left thumb')),
                ('right_thumb', models.ImageField(blank=True, null=True, upload_to='biometrics/%Y/%m/%d/', verbose_name='right thumb')),
                ('captured_at', models.DateTimeField(auto_now_add=True, verbose_name='captured at')),
                ('notes', models.TextField(blank=True, verbose_name='notes')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('captured_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='biometrics_captured', to=settings.AUTH_USER_MODEL, verbose_name='captured by')),
                ('student', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='biometric', to='api.student', verbose_name='student')),
            ],
            options={
                'verbose_name': 'Biometric',
                'verbose_name_plural': 'Biometrics',
            },
        ),
        migrations.CreateModel(
            name='BioData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('surname', models.CharField(max_length=100, verbose_name='surname')),
                ('first_name', models.CharField(max_length=100, verbose_name='first name')),
                ('other_names', models.CharField(blank=True, max_length=100, verbose_name='other names')),
                ('gender', models.CharField(choices=[('male', 'Male'), ('female', 'Female')], max_length=10, verbose_name='gender')),
                ('date_of_birth', models.DateField(verbose_name='date of birth')),
                ('passport_photo', models.ImageField(blank=True, help_text='Student passport photograph', null=True, upload_to='students/passports/', verbose_name='passport photo')),
                ('nationality', models.CharField(default='Nigerian', max_length=100, verbose_name='nationality')),
                ('state_of_origin', models.CharField(max_length=100, verbose_name='state of origin')),
                ('permanent_address', models.TextField(verbose_name='permanent address')),
                ('lin', models.CharField(blank=True, help_text='Learner Identification Number (LIN)', max_length=50, verbose_name='learner identification number')),
                ('has_medical_condition', models.BooleanField(default=False, verbose_name='has medical condition')),
                ('medical_condition_details', models.TextField(blank=True, help_text='Describe any medical conditions', verbose_name='medical condition details')),
                ('blood_group', models.CharField(blank=True, choices=[('A+', 'A+'), ('A-', 'A-'), ('B+', 'B+'), ('B-', 'B-'), ('O+', 'O+'), ('O-', 'O-'), ('AB+', 'AB+'), ('AB-', 'AB-')], max_length=5, verbose_name='blood group')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('student', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='biodata', to='api.student', verbose_name='student')),
            ],
            options={
                'verbose_name': 'Bio Data',
                'verbose_name_plural': 'Bio Data',
            },
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.CharField(editable=False, max_length=50, primary_key=True, serialize=False, verbose_name='id')),
                ('name', models.CharField(max_length=200, verbose_name='subject name')),
                ('code', models.CharField(blank=True, help_text='Auto-generated from subject name and class code', max_length=50, unique=True, verbose_name='subject code')),
                ('is_core', models.BooleanField(default=False, verbose_name='core/compulsory')),
                ('is_trade', models.BooleanField(default=False, verbose_name='trade subject')),
                ('order', models.PositiveSmallIntegerField(default=0, verbose_name='display order')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('class_model', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='subjects', to='api.class', verbose_name='class')),
                ('department', models.ForeignKey(blank=True, help_text='Only for Senior School subjects', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='subjects', to='api.department', verbose_name='department')),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='subjects', to='api.school', verbose_name='school')),
            ],
            options={
                'verbose_name': 'Subject',
                'verbose_name_plural': 'Subjects',
                'ordering': ['school', 'class_model', 'order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='StudentSubject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, verbose_name='active')),
                ('registered_at', models.DateTimeField(auto_now_add=True, verbose_name='registered at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='student_subject_registrations', to='api.session', verbose_name='session')),
                ('session_term', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='student_subject_registrations', to='api.sessionterm', verbose_name='session term')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subject_registrations', to='api.student', verbose_name='student')),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='student_registrations', to='api.subject', verbose_name='subject')),
            ],
            options={
                'verbose_name': 'Student Subject',
                'verbose_name_plural': 'Student Subjects',
                'ordering': ['student', 'subject'],
            },
        ),
        migrations.CreateModel(
            name='SubjectGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='group name')),
                ('code', models.CharField(max_length=10, verbose_name='group code')),
                ('selection_type', models.CharField(choices=[('single', 'Single Selection'), ('multiple', 'Multiple Selection')], default='multiple', help_text='Single: student selects one, Multiple: student can select multiple', max_length=10, verbose_name='selection type')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('class_model', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='subject_groups', to='api.class', verbose_name='class')),
            ],
            options={
                'verbose_name': 'Subject Group',
                'verbose_name_plural': 'Subject Groups',
                'ordering': ['class_model', 'name'],
            },
        ),
        migrations.AddField(
            model_name='subject',
            name='subject_group',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='subjects', to='api.subjectgroup', verbose_name='subject group'),
        ),
        migrations.CreateModel(
            name='LoanPayment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('payment_date', models.DateField(default=django.utils.timezone.now)),
                ('month', models.PositiveIntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12)])),
                ('year', models.PositiveIntegerField()),
                ('reference_number', models.CharField(blank=True, max_length=100)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('loan_application', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='loan_payments', to='api.loanapplication')),
                ('processed_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='loan_payments_processed', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'loan_payments',
                'ordering': ['-payment_date'],
                'indexes': [models.Index(fields=['year', 'month'], name='loan_paymen_year_ccc53b_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='feetype',
            index=models.Index(fields=['school', 'is_active'], name='fee_types_school__3c4704_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='feetype',
            unique_together={('school', 'name')},
        ),
        migrations.AlterUniqueTogether(
            name='department',
            unique_together={('school', 'code')},
        ),
        migrations.AlterUniqueTogether(
            name='class',
            unique_together={('school', 'name')},
        ),
        migrations.AlterUniqueTogether(
            name='sessionterm',
            unique_together={('session', 'term_name')},
        ),
        migrations.AddIndex(
            model_name='staff',
            index=models.Index(fields=['staff_id'], name='staff_staff_i_26d4dd_idx'),
        ),
        migrations.AddIndex(
            model_name='staff',
            index=models.Index(fields=['school', 'status'], name='staff_school__0f983d_idx'),
        ),
        migrations.AddIndex(
            model_name='staff',
            index=models.Index(fields=['zone'], name='staff_zone_9fa8ed_idx'),
        ),
        migrations.AddIndex(
            model_name='salarypayment',
            index=models.Index(fields=['status'], name='salary_paym_status_b23fa7_idx'),
        ),
        migrations.AddIndex(
            model_name='salarypayment',
            index=models.Index(fields=['year', 'month'], name='salary_paym_year_a0acd5_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='salarypayment',
            unique_together={('staff', 'month', 'year')},
        ),
        migrations.AddIndex(
            model_name='loanapplication',
            index=models.Index(fields=['application_number'], name='loan_applic_applica_c66ba7_idx'),
        ),
        migrations.AddIndex(
            model_name='loanapplication',
            index=models.Index(fields=['status'], name='loan_applic_status_2fc934_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='staffeducation',
            unique_together={('staff', 'level', 'institution_name')},
        ),
        migrations.AddIndex(
            model_name='student',
            index=models.Index(fields=['application_number'], name='api_student_applica_d7d10a_idx'),
        ),
        migrations.AddIndex(
            model_name='student',
            index=models.Index(fields=['admission_number'], name='api_student_admissi_2e7a3e_idx'),
        ),
        migrations.AddIndex(
            model_name='student',
            index=models.Index(fields=['status'], name='api_student_status_8ed2d4_idx'),
        ),
        migrations.AddIndex(
            model_name='student',
            index=models.Index(fields=['school', 'class_model'], name='api_student_school__8e173d_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='guardian',
            unique_together={('student', 'guardian_type')},
        ),
        migrations.AddIndex(
            model_name='feepayment',
            index=models.Index(fields=['student', 'fee_type'], name='fee_payment_student_424475_idx'),
        ),
        migrations.AddIndex(
            model_name='feepayment',
            index=models.Index(fields=['session', 'session_term'], name='fee_payment_session_c1fe1b_idx'),
        ),
        migrations.AddIndex(
            model_name='feepayment',
            index=models.Index(fields=['payment_date'], name='fee_payment_payment_2c0b73_idx'),
        ),
        migrations.AddIndex(
            model_name='feepayment',
            index=models.Index(fields=['receipt_number'], name='fee_payment_receipt_04915a_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='studentsubject',
            unique_together={('student', 'subject', 'session')},
        ),
    ]
